#!/usr/bin/env python3
# main.py
"""
Point d'entr√©e principal du projet d'analyse des pr√©cipitations extr√™mes au S√©n√©gal.

Ce fichier permet de lancer facilement l'analyse compl√®te depuis la racine du projet.
Il ex√©cute s√©quentiellement :
1. La d√©tection des √©v√©nements extr√™mes (01_detection_extremes.py)
2. L'analyse spatiale des top 10 √©v√©nements (02_spatial_analysis_top10.py)
3. L'analyse spatiale d√©taill√©e des TOP 5 les plus intenses (03_spatial_analysis_top5.py)
4. L'analyse des t√©l√©connexions oc√©an-atmosph√®re (04_teleconnections_analysis.py)

Utilisation:
    python main.py
    python main.py /chemin/vers/chirps.mat
    python main.py --only-top5  # Analyse TOP 5 uniquement
    python main.py --only-teleconnections  # T√©l√©connexions uniquement
    python main.py --skip-spatial  # D√©tection + T√©l√©connexions

Auteur: [Laity FAYE]
Date: [01/06/2025]
"""

import sys
import subprocess
from pathlib import Path
import time
import argparse

def run_script(script_name, description, args=None):
    """
    Lance un script avec gestion d'erreurs.
    
    Args:
        script_name (str): Nom du script √† lancer
        description (str): Description du script pour l'affichage
        args (list): Arguments suppl√©mentaires √† passer au script
    
    Returns:
        int: Code de retour du script
    """
    print(f"\n{'='*60}")
    print(f"üöÄ Lancement: {description}")
    print(f"{'='*60}")
    
    # Chemin vers le script
    script_path = Path(__file__).parent / "scripts" / script_name
    
    # Construire la commande
    cmd = [sys.executable, str(script_path)]
    if args:
        cmd.extend(args)
    
    # Lancer le script
    try:
        start_time = time.time()
        result = subprocess.run(cmd, check=True)
        duration = time.time() - start_time
        
        print(f"\n‚úÖ {description} termin√© avec succ√®s!")
        print(f"‚è±Ô∏è  Dur√©e: {duration:.1f} secondes")
        return result.returncode
        
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå Erreur lors de l'ex√©cution de {description}: {e}")
        print(f"Code d'erreur: {e.returncode}")
        return e.returncode
        
    except FileNotFoundError:
        print(f"\n‚ùå Script non trouv√©: {script_path}")
        print("V√©rifiez que la structure du projet est correcte")
        return 1

def parse_arguments():
    """
    Parse les arguments de la ligne de commande.
    
    Returns:
        argparse.Namespace: Arguments pars√©s
    """
    parser = argparse.ArgumentParser(
        description="Analyse compl√®te des pr√©cipitations extr√™mes au S√©n√©gal",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
EXEMPLES:
    # Pipeline complet (4 √©tapes)
    python main.py
    
    # Pipeline complet avec fichier CHIRPS sp√©cifique
    python main.py data/mon_fichier_chirps.mat
    
    # Analyse TOP 5 uniquement
    python main.py --only-top5
    
    # T√©l√©connexions uniquement
    python main.py --only-teleconnections
    
    # D√©tection + T√©l√©connexions (ignorer analyses spatiales)
    python main.py --skip-spatial
    
    # T√©l√©connexions avec lag personnalis√©
    python main.py --only-teleconnections --max-lag 18
        """
    )
    
    # Arguments principaux
    parser.add_argument(
        'chirps_file', 
        nargs='?', 
        help='Chemin vers le fichier CHIRPS (.mat ou .nc)'
    )
    
    # Options de pipeline
    pipeline_group = parser.add_argument_group('Options de pipeline')
    pipeline_group.add_argument(
        '--only-top5', 
        action='store_true',
        help='Ex√©cuter uniquement l\'analyse spatiale TOP 5'
    )
    pipeline_group.add_argument(
        '--only-teleconnections', 
        action='store_true',
        help='Ex√©cuter uniquement l\'analyse des t√©l√©connexions'
    )
    pipeline_group.add_argument(
        '--skip-top10', 
        action='store_true',
        help='Ignorer l\'analyse spatiale TOP 10'
    )
    pipeline_group.add_argument(
        '--skip-spatial', 
        action='store_true',
        help='Ignorer toutes les analyses spatiales'
    )
    
    # Options sp√©cifiques aux t√©l√©connexions
    telecon_group = parser.add_argument_group('Options t√©l√©connexions')
    telecon_group.add_argument(
        '--max-lag', 
        type=int, 
        default=12,
        help='D√©calage temporel maximum pour les t√©l√©connexions (d√©faut: 12 mois)'
    )
    telecon_group.add_argument(
        '--correlation-type',
        choices=['pearson', 'spearman'],
        default='pearson',
        help='Type de corr√©lation √† calculer (d√©faut: pearson)'
    )
    
    return parser.parse_args()

def main():
    """
    Lance l'analyse compl√®te des pr√©cipitations extr√™mes.
    """
    # Parse des arguments
    args = parse_arguments()
    
    print("üåßÔ∏è  ANALYSE DES PR√âCIPITATIONS EXTR√äMES AU S√âN√âGAL")
    print("=" * 70)
    print("Analyse automatis√©e avec apprentissage automatique")
    print(f"Projet lanc√© depuis: {Path.cwd()}")
    print("=" * 70)
    
    # D√©terminer le mode d'ex√©cution
    if args.only_top5:
        mode = "TOP 5 uniquement"
        total_steps = 1
        steps_to_run = ['top5']
    elif args.only_teleconnections:
        mode = "T√©l√©connexions uniquement"
        total_steps = 1
        steps_to_run = ['teleconnections']
    elif args.skip_spatial:
        mode = "D√©tection + T√©l√©connexions"
        total_steps = 2
        steps_to_run = ['detection', 'teleconnections']
    elif args.skip_top10:
        mode = "D√©tection + TOP 5 + T√©l√©connexions"
        total_steps = 3
        steps_to_run = ['detection', 'top5', 'teleconnections']
    else:
        mode = "Pipeline complet"
        total_steps = 4
        steps_to_run = ['detection', 'top10', 'top5', 'teleconnections']
    
    print(f"üéØ MODE: {mode} ({total_steps} √©tapes)")
    
    # Pr√©parer les arguments pour les scripts
    script_args = [args.chirps_file] if args.chirps_file else None
    telecon_args = []
    if args.max_lag != 12:
        telecon_args.extend(['--max-lag', str(args.max_lag)])
    if args.correlation_type != 'pearson':
        telecon_args.extend(['--correlation-type', args.correlation_type])
    
    current_step = 0
    
    # √âTAPE 1: D√©tection des √©v√©nements extr√™mes
    if 'detection' in steps_to_run:
        current_step += 1
        print(f"\nüìç √âTAPE {current_step}/{total_steps}: D√©tection des √©v√©nements extr√™mes")
        exit_code = run_script(
            script_name="01_detection_extremes.py",
            description="D√©tection des √©v√©nements de pr√©cipitations extr√™mes",
            args=script_args
        )
        
        if exit_code != 0:
            print(f"\n‚ùå Arr√™t du pipeline - Erreur dans l'√©tape de d√©tection")
            return exit_code
    
    # √âTAPE 2: Analyse spatiale des top 10 (optionnel)
    if 'top10' in steps_to_run:
        current_step += 1
        print(f"\nüìç √âTAPE {current_step}/{total_steps}: Analyse spatiale TOP 10")
        exit_code = run_script(
            script_name="02_spatial_analysis_top10.py",
            description="Analyse spatiale des 10 √©v√©nements les plus extr√™mes",
            args=None
        )
        
        if exit_code != 0:
            print(f"\n‚ö†Ô∏è  Erreur dans l'analyse TOP 10 - Poursuite du pipeline...")
    
    # √âTAPE 3: Analyse spatiale d√©taill√©e des TOP 5
    if 'top5' in steps_to_run:
        current_step += 1
        print(f"\nüìç √âTAPE {current_step}/{total_steps}: Analyse spatiale d√©taill√©e TOP 5")
        exit_code = run_script(
            script_name="03_spatial_analysis_top5.py",
            description="Distribution spatiale pr√©cise des 5 √©v√©nements les plus intenses",
            args=None
        )
        
        if exit_code != 0:
            print(f"\n‚ö†Ô∏è  Erreur dans l'analyse TOP 5 - Poursuite du pipeline...")
    
    # √âTAPE 4: Analyse des t√©l√©connexions oc√©an-atmosph√®re
    if 'teleconnections' in steps_to_run:
        current_step += 1
        print(f"\nüìç √âTAPE {current_step}/{total_steps}: Analyse des t√©l√©connexions")
        exit_code = run_script(
            script_name="04_teleconnections_analysis.py",
            description="Analyse des t√©l√©connexions oc√©an-atmosph√®re",
            args=telecon_args if telecon_args else None
        )
        
        if exit_code != 0:
            print(f"\n‚ùå Erreur dans l'analyse des t√©l√©connexions")
            return exit_code
    
    # R√©sum√© final
    print_final_summary(steps_to_run, args)
    
    return 0

def print_final_summary(steps_to_run, args):
    """
    Affiche le r√©sum√© final selon les √©tapes ex√©cut√©es.
    
    Args:
        steps_to_run (list): Liste des √©tapes ex√©cut√©es
        args: Arguments de la ligne de commande
    """
    print(f"\n{'='*70}")
    print("üéâ ANALYSE COMPL√àTE TERMIN√âE AVEC SUCC√àS!")
    print(f"{'='*70}")
    print("üìä R√©sultats disponibles dans:")
    
    # R√©sultats selon les √©tapes ex√©cut√©es
    if 'detection' in steps_to_run:
        print("   ‚Ä¢ data/processed/ - √âv√©nements d√©tect√©s et climatologie")
        print("   ‚Ä¢ outputs/reports/ - Rapports de d√©tection")
        print("   ‚Ä¢ outputs/visualizations/detection/ - Visualisations temporelles")
    
    if 'top10' in steps_to_run:
        print("   ‚Ä¢ outputs/visualizations/spatial/ - Analyses spatiales TOP 10")
        print("   ‚Ä¢ outputs/reports/ - Rapports g√©ographiques TOP 10")
    
    if 'top5' in steps_to_run:
        print("   ‚Ä¢ outputs/visualizations/spatial_top5/ - Analyse d√©taill√©e TOP 5 ‚≠ê")
        print("   ‚Ä¢ outputs/data/ - Donn√©es spatiales TOP 5")
    
    if 'teleconnections' in steps_to_run:
        print("   ‚Ä¢ data/processed/ - Dataset ML et features climatiques")
        print("   ‚Ä¢ outputs/visualizations/teleconnections/ - Corr√©lations et t√©l√©connexions")
        print("   ‚Ä¢ outputs/reports/ - Rapport de t√©l√©connexions")
    
    print("   ‚Ä¢ outputs/logs/ - Journaux d'ex√©cution d√©taill√©s")
    
    # R√©sum√© sp√©cifique selon le mode
    if 'teleconnections' in steps_to_run:
        print(f"\nüåä T√âL√âCONNEXIONS - FICHIERS G√âN√âR√âS:")
        print("   üìä climate_indices_combined.csv - Indices climatiques (IOD, Nino34, TNA)")
        print(f"   üìä climate_features_lag{args.max_lag}.csv - Features avec d√©calages")
        print("   üìä ml_dataset_teleconnections.csv - Dataset pr√™t pour ML")
        print("   üìÑ rapport_teleconnexions.txt - Analyse compl√®te des corr√©lations")
        print("   üó∫Ô∏è  correlation_heatmap_lags.png - Heatmap des corr√©lations")
        print("   üìà detailed_lag_correlations.png - Corr√©lations d√©taill√©es")
        print("   üåç seasonal_teleconnections_comparison.png - Comparaison saisonni√®re")
        
        print(f"\nü§ñ PR√äT POUR LE MACHINE LEARNING:")
        print("   ‚Ä¢ Variables cibles: occurrence, count, intensity")
        print(f"   ‚Ä¢ Features climatiques: {3 * (args.max_lag + 1)} variables avec lags")
        print("   ‚Ä¢ P√©riode d'analyse: 1981-2023 (42+ ans)")
        print("   ‚Ä¢ T√©l√©connexions quantifi√©es: IOD, ENSO (Nino34), TNA")
    
    if 'top5' in steps_to_run:
        print(f"\nüéØ TOP 5 - FICHIERS G√âN√âR√âS:")
        print("   üìä spatial_analysis_top5_intense.csv - M√©triques d√©taill√©es")
        print("   üìÑ spatial_summary_top5_intense.json - R√©sum√© structur√©")
        print("   üìã rapport_spatial_top5.txt - Rapport g√©ographique complet")
        print("   üó∫Ô∏è  5 cartes individuelles + analyses comparatives")
    
    # Recommandations selon les √©tapes
    if 'teleconnections' in steps_to_run:
        print(f"\nüöÄ PROCHAINES √âTAPES RECOMMAND√âES:")
        print("   ‚Ä¢ D√©veloppement des mod√®les ML (Random Forest, XGBoost, SVM)")
        print("   ‚Ä¢ Validation crois√©e temporelle")
        print("   ‚Ä¢ Optimisation des hyperparam√®tres")
        print("   ‚Ä¢ Tests de performance pr√©dictive")
        print("   ‚Ä¢ D√©veloppement du syst√®me op√©rationnel de pr√©vision")

def show_help():
    """Affiche l'aide d'utilisation d√©taill√©e."""
    help_text = """
üåßÔ∏è  ANALYSE DES PR√âCIPITATIONS EXTR√äMES AU S√âN√âGAL

DESCRIPTION:
    Pipeline complet d'analyse des √©v√©nements de pr√©cipitations extr√™mes au S√©n√©gal
    incluant la d√©tection, l'analyse spatiale et l'√©tude des t√©l√©connexions oc√©an-atmosph√®re.

PIPELINE COMPLET (4 √©tapes):
    1. D√©tection des √©v√©nements extr√™mes (CHIRPS 1981-2023)
    2. Analyse spatiale TOP 10 √©v√©nements les plus √©tendus
    3. Analyse spatiale d√©taill√©e TOP 5 √©v√©nements les plus intenses  
    4. Analyse des t√©l√©connexions (IOD, ENSO, TNA) avec ML

UTILISATION:
    python main.py [OPTIONS] [FICHIER_CHIRPS]

ARGUMENTS:
    FICHIER_CHIRPS    Chemin vers le fichier CHIRPS (.mat ou .nc)
                      Optionnel - d√©tection automatique par d√©faut

OPTIONS DE PIPELINE:
    --only-top5           Analyse spatiale TOP 5 uniquement
    --only-teleconnections Analyse des t√©l√©connexions uniquement  
    --skip-top10          Ignorer l'analyse TOP 10
    --skip-spatial        Ignorer toutes les analyses spatiales
    
OPTIONS T√âL√âCONNEXIONS:
    --max-lag N           D√©calage temporel maximum (d√©faut: 12 mois)
    --correlation-type T  Type de corr√©lation: pearson|spearman (d√©faut: pearson)

EXEMPLES:
    # Pipeline complet (recommand√©)
    python main.py
    
    # Pipeline avec fichier CHIRPS sp√©cifique
    python main.py /chemin/vers/chirps_data.mat
    
    # T√©l√©connexions uniquement (apr√®s d√©tection)
    python main.py --only-teleconnections
    
    # T√©l√©connexions avec lag √©tendu
    python main.py --only-teleconnections --max-lag 18
    
    # D√©tection + T√©l√©connexions (ignorer spatial)
    python main.py --skip-spatial
    
    # Analyse TOP 5 uniquement
    python main.py --only-top5

SORTIES:
    data/processed/           - Donn√©es trait√©es et datasets ML
    outputs/reports/          - Rapports d'analyse d√©taill√©s
    outputs/visualizations/   - Toutes les cartes et graphiques
    outputs/data/            - M√©triques et r√©sum√©s structur√©s
    outputs/logs/            - Journaux d'ex√©cution

PR√âREQUIS:
    ‚Ä¢ Python 3.8+
    ‚Ä¢ Fichiers CHIRPS dans data/raw/
    ‚Ä¢ Indices climatiques dans data/raw/climate_indices/
    ‚Ä¢ Structure de projet respect√©e
    """
    print(help_text)

if __name__ == "__main__":
    # V√©rifier si l'aide est demand√©e
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help']:
        show_help()
        sys.exit(0)
    
    # Lancer l'analyse
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Analyse interrompue par l'utilisateur")
        print("Les fichiers partiels peuvent √™tre conserv√©s dans outputs/")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        print("V√©rifiez la configuration et les d√©pendances")
        import traceback
        traceback.print_exc()
        sys.exit(1)