#!/usr/bin/env python3
# main.py
"""
Point d'entr√©e principal du projet d'analyse des pr√©cipitations extr√™mes au S√©n√©gal.

Ce fichier permet de lancer facilement l'analyse compl√®te depuis la racine du projet.
Il ex√©cute s√©quentiellement :
1. La d√©tection des √©v√©nements extr√™mes (01_detection_extremes.py)
2. L'analyse spatiale des top 10 √©v√©nements (02_spatial_analysis_top10.py)
3. L'analyse spatiale d√©taill√©e des TOP 5 les plus intenses (03_spatial_analysis_top5.py)
4. L'analyse des t√©l√©connexions oc√©an-atmosph√®re (04_teleconnections_analysis.py)
5. Le pipeline d'apprentissage automatique complet (05_machine_learning_pipeline.py)
6. L'outil de pr√©diction interactif (06_prediction_tool.py) - OPTIONNEL
7. L'analyse de clustering avanc√©e (07_advanced_clustering_analysis.py)

Version avec correction automatique et pipeline ML automatis√©.

Utilisation:
    python main.py                    # Pipeline complet ML automatis√© (6 √©tapes)
    python main.py --full-pipeline    # Pipeline complet avec outil interactif (7 √©tapes)
    python main.py --only-ml          # Pipeline ML uniquement
    python main.py --interactive      # Mode avec questions interactives

Auteur: [Laity FAYE]
Date: [01/06/2025]
"""

import sys
import subprocess
from pathlib import Path
import time
import argparse

def auto_fix_ml_dataset():
    """
    Corrige automatiquement les noms de colonnes du dataset ML
    pour assurer la compatibilit√© avec le pipeline ML.
    """
    import pandas as pd
    from pathlib import Path
    
    print(f"\nüîß CORRECTION AUTOMATIQUE DES COLONNES ML")
    print("=" * 50)
    
    try:
        ml_file = Path("data/processed/ml_dataset_teleconnections.csv")
        
        if not ml_file.exists():
            print("‚ö†Ô∏è  Dataset ML non trouv√© - correction ignor√©e")
            return True
        
        # Charger le dataset
        df = pd.read_csv(ml_file, index_col=0, parse_dates=True)
        print(f"‚úÖ Dataset ML charg√©: {df.shape}")
        
        # V√©rifier si correction n√©cessaire
        target_cols_expected = ['occurrence', 'count', 'intensity']
        target_cols_current = ['target_occurrence', 'target_count', 'target_intensity']
        
        needs_fix = any(col in df.columns for col in target_cols_current)
        already_fixed = all(col in df.columns for col in target_cols_expected)
        
        if already_fixed and not needs_fix:
            print("‚úÖ Colonnes d√©j√† correctes")
            print(f"   Colonnes target trouv√©es: {[col for col in target_cols_expected if col in df.columns]}")
            return True
        
        if needs_fix:
            print("üîÑ Correction des noms de colonnes en cours...")
            
            # Appliquer la correction
            column_mapping = {
                'target_occurrence': 'occurrence',
                'target_count': 'count', 
                'target_intensity': 'intensity'
            }
            
            columns_renamed = []
            for old_col, new_col in column_mapping.items():
                if old_col in df.columns:
                    columns_renamed.append(f"{old_col} ‚Üí {new_col}")
            
            df = df.rename(columns=column_mapping)
            df.to_csv(ml_file)
            
            print("‚úÖ Correction appliqu√©e avec succ√®s:")
            for rename_info in columns_renamed:
                print(f"   {rename_info}")
            
            # V√©rification finale
            print(f"\n‚úÖ V√©rification finale:")
            for col in target_cols_expected:
                if col in df.columns:
                    print(f"   ‚úÖ {col}: Trouv√©e")
                else:
                    print(f"   ‚ùå {col}: Manquante")
            
            return True
        
        print("‚ö†Ô∏è  √âtat des colonnes non d√©termin√©")
        print(f"   Colonnes disponibles: {list(df.columns)[:10]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la correction: {e}")
        print("‚ö†Ô∏è  Poursuite du pipeline malgr√© l'erreur")
        return True  # Ne pas arr√™ter le pipeline pour cette erreur

def run_script(script_name, description, args=None):
    """
    Lance un script avec gestion d'erreurs.
    
    Args:
        script_name (str): Nom du script √† lancer
        description (str): Description du script pour l'affichage
        args (list): Arguments suppl√©mentaires √† passer au script
    
    Returns:
        int: Code de retour du script
    """
    print(f"\n{'='*70}")
    print(f"üöÄ Lancement: {description}")
    print(f"{'='*70}")
    
    # Chemin vers le script
    script_path = Path(__file__).parent / "scripts" / script_name
    
    # Construire la commande
    cmd = [sys.executable, str(script_path)]
    if args:
        cmd.extend(args)
    
    # Lancer le script
    try:
        start_time = time.time()
        result = subprocess.run(cmd, check=True)
        duration = time.time() - start_time
        
        print(f"\n‚úÖ {description} termin√© avec succ√®s!")
        print(f"‚è±Ô∏è  Dur√©e: {duration:.1f} secondes")
        return result.returncode
        
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå Erreur lors de l'ex√©cution de {description}: {e}")
        print(f"Code d'erreur: {e.returncode}")
        return e.returncode
        
    except FileNotFoundError:
        print(f"\n‚ùå Script non trouv√©: {script_path}")
        print("V√©rifiez que la structure du projet est correcte")
        return 1

def run_prediction_tool_non_interactive():
    """
    Lance l'outil de pr√©diction en mode non-interactif pour le test.
    """
    print(f"\nüìç √âTAPE 6/7: Test de l'outil de pr√©diction (non-interactif)")
    print("‚ö†Ô∏è  Mode automatique - test rapide des mod√®les")
    
    try:
        # Import local pour √©viter les d√©pendances
        sys.path.insert(0, str(Path(__file__).parent))
        
    except ImportError:
        print("‚ö†Ô∏è  Module de test automatique non disponible")
        print("üí° Pour utiliser l'outil interactif: python scripts/06_prediction_tool.py")
        return 0
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors du test: {e}")
        print("üí° Pour utiliser l'outil interactif: python scripts/06_prediction_tool.py")
        return 0

def parse_arguments():
    """
    Parse les arguments de la ligne de commande.
    
    Returns:
        argparse.Namespace: Arguments pars√©s
    """
    parser = argparse.ArgumentParser(
        description="Analyse compl√®te des pr√©cipitations extr√™mes au S√©n√©gal avec ML",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
EXEMPLES:
    # Pipeline automatis√© par d√©faut (6 √©tapes - RECOMMAND√â)
    python main.py
    
    # Pipeline complet avec outil interactif (7 √©tapes)
    python main.py --full-pipeline
    
    # Pipeline avec questions interactives
    python main.py --interactive
    
    # Machine Learning uniquement
    python main.py --only-ml
    
    # Clustering avanc√© uniquement
    python main.py --only-clustering
    
    # T√©l√©connexions + ML (ignorer analyses spatiales)
    python main.py --skip-spatial
        """
    )
    
    # Arguments principaux
    parser.add_argument(
        'chirps_file', 
        nargs='?', 
        help='Chemin vers le fichier CHIRPS (.mat ou .nc)'
    )
    
    # Options de pipeline
    pipeline_group = parser.add_argument_group('Options de pipeline')
    pipeline_group.add_argument(
        '--full-pipeline', 
        action='store_true',
        help='Ex√©cuter toutes les 7 √©tapes (avec outil interactif)'
    )
    pipeline_group.add_argument(
        '--interactive',
        action='store_true',
        help='Mode interactif avec questions utilisateur'
    )
    pipeline_group.add_argument(
        '--only-top5', 
        action='store_true',
        help='Ex√©cuter uniquement l\'analyse spatiale TOP 5'
    )
    pipeline_group.add_argument(
        '--only-teleconnections', 
        action='store_true',
        help='Ex√©cuter uniquement l\'analyse des t√©l√©connexions'
    )
    pipeline_group.add_argument(
        '--only-ml', 
        action='store_true',
        help='Ex√©cuter uniquement le pipeline d\'apprentissage automatique'
    )
    pipeline_group.add_argument(
        '--only-clustering', 
        action='store_true',
        help='Ex√©cuter uniquement l\'analyse de clustering avanc√©e'
    )
    pipeline_group.add_argument(
        '--skip-top10', 
        action='store_true',
        help='Ignorer l\'analyse spatiale TOP 10'
    )
    pipeline_group.add_argument(
        '--skip-spatial', 
        action='store_true',
        help='Ignorer toutes les analyses spatiales'
    )
    
    # Options sp√©cifiques aux t√©l√©connexions
    telecon_group = parser.add_argument_group('Options t√©l√©connexions')
    telecon_group.add_argument(
        '--max-lag', 
        type=int, 
        default=12,
        help='D√©calage temporel maximum pour les t√©l√©connexions (d√©faut: 12 mois)'
    )
    telecon_group.add_argument(
        '--correlation-type',
        choices=['pearson', 'spearman'],
        default='pearson',
        help='Type de corr√©lation √† calculer (d√©faut: pearson)'
    )
    
    # Options ML
    ml_group = parser.add_argument_group('Options Machine Learning')
    ml_group.add_argument(
        '--skip-clustering',
        action='store_true',
        help='Ignorer l\'analyse de clustering dans le pipeline ML'
    )
    ml_group.add_argument(
        '--skip-prediction-test',
        action='store_true',
        help='Ignorer le test de l\'outil de pr√©diction'
    )
    
    return parser.parse_args()

def determine_pipeline_steps(args):
    """
    D√©termine les √©tapes √† ex√©cuter selon les arguments.
    
    Args:
        args: Arguments de la ligne de commande
        
    Returns:
        list: Liste des √©tapes √† ex√©cuter
    """
    if args.only_top5:
        steps = ['top5']
    elif args.only_teleconnections:
        steps = ['teleconnections']
    elif args.only_ml:
        steps = ['ml_pipeline']
        if not args.skip_clustering:
            steps.append('clustering')
    elif args.only_clustering:
        steps = ['clustering']
    elif args.full_pipeline:
        # Pipeline complet avec outil interactif
        steps = ['detection', 'top10', 'top5', 'teleconnections', 'ml_pipeline', 'prediction_tool_interactive', 'clustering']
    elif args.interactive:
        # Mode interactif avec questions
        steps = ['detection', 'top10', 'top5', 'teleconnections', 'ml_pipeline', 'prediction_tool_interactive', 'clustering']
    elif args.skip_spatial:
        steps = ['detection', 'teleconnections', 'ml_pipeline', 'clustering']
    elif args.skip_top10:
        steps = ['detection', 'top5', 'teleconnections', 'ml_pipeline', 'clustering']
    else:
        # Pipeline automatis√© par d√©faut (6 √©tapes - sans outil interactif)
        steps = ['detection', 'top10', 'top5', 'teleconnections', 'ml_pipeline', 'clustering']
    
    # Ajustements selon les options
    if args.skip_prediction_test and 'prediction_tool_test' in steps:
        steps.remove('prediction_tool_test')
    if args.skip_clustering and 'clustering' in steps:
        steps.remove('clustering')
    
    return steps

def get_pipeline_info(steps_to_run):
    """
    Retourne les informations sur le pipeline selon les √©tapes.
    
    Args:
        steps_to_run (list): Liste des √©tapes √† ex√©cuter
        
    Returns:
        tuple: (mode_description, total_steps)
    """
    total_steps = len(steps_to_run)
    
    if steps_to_run == ['top5']:
        mode = "TOP 5 uniquement"
    elif steps_to_run == ['teleconnections']:
        mode = "T√©l√©connexions uniquement"
    elif steps_to_run == ['ml_pipeline']:
        mode = "Machine Learning uniquement"
    elif steps_to_run == ['ml_pipeline', 'clustering']:
        mode = "Machine Learning + Clustering"
    elif steps_to_run == ['clustering']:
        mode = "Clustering avanc√© uniquement"
    elif 'prediction_tool_interactive' in steps_to_run:
        mode = "Pipeline complet avec outil interactif (7 √©tapes)"
    elif total_steps == 6 and 'ml_pipeline' in steps_to_run:
        mode = "Pipeline automatis√© complet (6 √©tapes)"
    elif 'ml_pipeline' in steps_to_run and total_steps >= 4:
        mode = "Pipeline personnalis√© avec ML"
    else:
        mode = "Pipeline personnalis√©"
    
    return mode, total_steps

def prepare_telecon_args(args):
    """
    Pr√©pare les arguments pour l'analyse des t√©l√©connexions.
    
    Args:
        args: Arguments de la ligne de commande
        
    Returns:
        list: Arguments pour le script de t√©l√©connexions
    """
    telecon_args = []
    if args.max_lag != 12:
        telecon_args.extend(['--max-lag', str(args.max_lag)])
    if args.correlation_type != 'pearson':
        telecon_args.extend(['--correlation-type', args.correlation_type])
    
    return telecon_args if telecon_args else None

def main():
    """
    Lance l'analyse compl√®te des pr√©cipitations extr√™mes.
    """
    # Parse des arguments
    args = parse_arguments()
    
    print("üåßÔ∏è  ANALYSE DES PR√âCIPITATIONS EXTR√äMES AU S√âN√âGAL")
    print("=" * 70)
    print("Analyse automatis√©e avec apprentissage automatique et clustering")
    print(f"Projet lanc√© depuis: {Path.cwd()}")
    print("=" * 70)
    
    # D√©terminer le mode d'ex√©cution
    steps_to_run = determine_pipeline_steps(args)
    mode, total_steps = get_pipeline_info(steps_to_run)
    
    print(f"üéØ MODE: {mode} ({total_steps} √©tapes)")
    print(f"üìã √âTAPES: {' ‚Üí '.join(steps_to_run)}")
    
    # Mode interactif ou automatis√©
    if args.interactive or args.full_pipeline:
        print("üîÆ MODE INTERACTIF: L'outil de pr√©diction posera des questions")
    else:
        print("ü§ñ MODE AUTOMATIS√â: Ex√©cution sans intervention utilisateur")
    
    # Pr√©parer les arguments pour les scripts
    script_args = [args.chirps_file] if args.chirps_file else None
    telecon_args = prepare_telecon_args(args)
    
    current_step = 0
    
    # √âTAPE 1: D√©tection des √©v√©nements extr√™mes
    if 'detection' in steps_to_run:
        current_step += 1
        print(f"\nüìç √âTAPE {current_step}/{total_steps}: D√©tection des √©v√©nements extr√™mes")
        exit_code = run_script(
            script_name="01_detection_extremes.py",
            description="D√©tection des √©v√©nements de pr√©cipitations extr√™mes",
            args=script_args
        )
        
        if exit_code != 0:
            print(f"\n‚ùå Arr√™t du pipeline - Erreur dans l'√©tape de d√©tection")
            return exit_code
    
    # √âTAPE 2: Analyse spatiale des top 10 (optionnel)
    if 'top10' in steps_to_run:
        current_step += 1
        print(f"\nüìç √âTAPE {current_step}/{total_steps}: Analyse spatiale TOP 10")
        exit_code = run_script(
            script_name="02_spatial_analysis_top10.py",
            description="Analyse spatiale des 10 √©v√©nements les plus extr√™mes",
            args=None
        )
        
        if exit_code != 0:
            print(f"\n‚ö†Ô∏è  Erreur dans l'analyse TOP 10 - Poursuite du pipeline...")
    
    # √âTAPE 3: Analyse spatiale d√©taill√©e des TOP 5
    if 'top5' in steps_to_run:
        current_step += 1
        print(f"\nüìç √âTAPE {current_step}/{total_steps}: Analyse spatiale d√©taill√©e TOP 5")
        exit_code = run_script(
            script_name="03_spatial_analysis_top5.py",
            description="Distribution spatiale pr√©cise des 5 √©v√©nements les plus intenses",
            args=None
        )
        
        if exit_code != 0:
            print(f"\n‚ö†Ô∏è  Erreur dans l'analyse TOP 5 - Poursuite du pipeline...")
    
    # √âTAPE 4: Analyse des t√©l√©connexions oc√©an-atmosph√®re
    if 'teleconnections' in steps_to_run:
        current_step += 1
        print(f"\nüìç √âTAPE {current_step}/{total_steps}: Analyse des t√©l√©connexions")
        exit_code = run_script(
            script_name="04_teleconnections_analysis.py",
            description="Analyse des t√©l√©connexions oc√©an-atmosph√®re",
            args=telecon_args if telecon_args else None
        )
        
        if exit_code != 0:
            print(f"\n‚ùå Erreur dans l'analyse des t√©l√©connexions")
            if 'ml_pipeline' in steps_to_run:
                print("‚ö†Ô∏è  Les √©tapes ML n√©cessitent les t√©l√©connexions - Arr√™t du pipeline")
                return exit_code
        
        # üîß CORRECTION AUTOMATIQUE APR√àS T√âL√âCONNEXIONS
        if 'ml_pipeline' in steps_to_run:
            print(f"\nüîß √âTAPE INTERM√âDIAIRE: Pr√©paration du dataset ML")
            auto_fix_success = auto_fix_ml_dataset()
            if not auto_fix_success:
                print("‚ö†Ô∏è  Correction √©chou√©e mais poursuite du pipeline")
    
    # √âTAPE 5: Pipeline d'apprentissage automatique
    if 'ml_pipeline' in steps_to_run:
        current_step += 1
        print(f"\nüìç √âTAPE {current_step}/{total_steps}: Pipeline d'apprentissage automatique")
        exit_code = run_script(
            script_name="05_machine_learning_pipeline.py",
            description="Pipeline ML complet (classification, r√©gression, clustering)",
            args=None
        )
        
        if exit_code != 0:
            print(f"\n‚ùå Erreur dans le pipeline ML")
            return exit_code
    
    # √âTAPE 6: Outil de pr√©diction
    if 'prediction_tool_interactive' in steps_to_run:
        current_step += 1
        print(f"\nüìç √âTAPE {current_step}/{total_steps}: Outil de pr√©diction interactif")
        print("‚ö†Ô∏è  ATTENTION: Cette √©tape est interactive - vous pouvez l'interrompre avec Ctrl+C")
        
        user_input = input("Voulez-vous lancer l'outil de pr√©diction interactif ? (y/N): ")
        if user_input.lower() in ['y', 'yes', 'oui']:
            exit_code = run_script(
                script_name="06_prediction_tool.py",
                description="Outil de pr√©diction des √©v√©nements extr√™mes",
                args=None
            )
            
            if exit_code != 0:
                print(f"\n‚ö†Ô∏è  Erreur dans l'outil de pr√©diction - Poursuite du pipeline...")
        else:
            print("‚è≠Ô∏è  Outil de pr√©diction ignor√©")
    
    # √âTAPE 7: Analyse de clustering avanc√©e
    if 'clustering' in steps_to_run:
        current_step += 1
        print(f"\nüìç √âTAPE {current_step}/{total_steps}: Analyse de clustering avanc√©e")
        exit_code = run_script(
            script_name="07_advanced_clustering_analysis.py",
            description="Analyse comparative des algorithmes de clustering",
            args=None
        )
        
        if exit_code != 0:
            print(f"\n‚ö†Ô∏è  Erreur dans l'analyse de clustering - Pipeline termin√© partiellement")
    
    # R√©sum√© final
    print_final_summary(steps_to_run, args)
    
    return 0

def print_final_summary(steps_to_run, args):
    """
    Affiche le r√©sum√© final selon les √©tapes ex√©cut√©es.
    
    Args:
        steps_to_run (list): Liste des √©tapes ex√©cut√©es
        args: Arguments de la ligne de commande
    """
    print(f"\n{'='*70}")
    print("üéâ ANALYSE COMPL√àTE TERMIN√âE AVEC SUCC√àS!")
    print(f"{'='*70}")
    print("üìä R√©sultats disponibles dans:")
    
    # R√©sultats selon les √©tapes ex√©cut√©es
    if 'detection' in steps_to_run:
        print("   ‚Ä¢ data/processed/ - √âv√©nements d√©tect√©s et climatologie")
        print("   ‚Ä¢ outputs/reports/ - Rapports de d√©tection")
        print("   ‚Ä¢ outputs/visualizations/detection/ - Visualisations temporelles")
    
    if 'top10' in steps_to_run:
        print("   ‚Ä¢ outputs/visualizations/spatial/ - Analyses spatiales TOP 10")
        print("   ‚Ä¢ outputs/reports/ - Rapports g√©ographiques TOP 10")
    
    if 'top5' in steps_to_run:
        print("   ‚Ä¢ outputs/visualizations/spatial_top5/ - Analyse d√©taill√©e TOP 5 ‚≠ê")
        print("   ‚Ä¢ outputs/data/ - Donn√©es spatiales TOP 5")
    
    if 'teleconnections' in steps_to_run:
        print("   ‚Ä¢ data/processed/ - Dataset ML et features climatiques")
        print("   ‚Ä¢ outputs/visualizations/teleconnections/ - Corr√©lations et t√©l√©connexions")
        print("   ‚Ä¢ outputs/reports/ - Rapport de t√©l√©connexions")
    
    if 'ml_pipeline' in steps_to_run:
        print("   ‚Ä¢ outputs/models/ - Mod√®les ML entra√Æn√©s (Random Forest, XGBoost, SVM, NN)")
        print("   ‚Ä¢ outputs/visualizations/machine_learning/ - Comparaisons et performances")
        print("   ‚Ä¢ outputs/data/ - Pr√©dictions et r√©sultats ML")
    
    if 'clustering' in steps_to_run:
        print("   ‚Ä¢ outputs/visualizations/clustering/ - Analyses de clustering comparatives")
        print("   ‚Ä¢ outputs/reports/ - Rapport de clustering avanc√©")
    
    print("   ‚Ä¢ outputs/logs/ - Journaux d'ex√©cution d√©taill√©s")
    
    # Mode automatis√©
    if not (args.interactive or args.full_pipeline):
        print(f"\nü§ñ PIPELINE AUTOMATIS√â TERMIN√â:")
        print("   ‚úÖ Aucune intervention utilisateur requise")
        print("   üîÆ Pour l'outil de pr√©diction interactif: python scripts/06_prediction_tool.py")
        print("   üìñ Pour le mode complet interactif: python main.py --full-pipeline")
    
    # R√©sum√© ML
    if 'ml_pipeline' in steps_to_run:
        print(f"\nü§ñ MACHINE LEARNING - PR√äT POUR UTILISATION:")
        print("   ‚Ä¢ Syst√®me de pr√©diction des √©v√©nements extr√™mes")
        print("   ‚Ä¢ Classification automatique des conditions √† risque")
        print("   ‚Ä¢ Estimation de l'intensit√© des pr√©cipitations")
        print("   ‚Ä¢ Identification des r√©gimes climatiques")
        
        print(f"\nüìã PR√äT POUR LE M√âMOIRE:")
        print("   ‚Ä¢ Chapitre 3: M√©thodologie compl√®te document√©e")
        print("   ‚Ä¢ Chapitre 4: R√©sultats avec visualisations et m√©triques")
        print("   ‚Ä¢ Chapitre 5: Discussion des performances et applications")
        print("   ‚Ä¢ Annexes: Rapports d√©taill√©s et comparaisons algorithmiques")

def show_help():
    """Affiche l'aide d'utilisation d√©taill√©e."""
    help_text = """
üåßÔ∏è  ANALYSE DES PR√âCIPITATIONS EXTR√äMES AU S√âN√âGAL

DESCRIPTION:
    Pipeline automatis√© d'analyse des √©v√©nements de pr√©cipitations extr√™mes au S√©n√©gal
    incluant la d√©tection, l'analyse spatiale, les t√©l√©connexions et l'apprentissage automatique.

MODES D'EX√âCUTION:
    ü§ñ AUTOMATIS√â (d√©faut): Ex√©cution sans intervention utilisateur
    üîÆ INTERACTIF: Permet l'utilisation de l'outil de pr√©diction interactif

PIPELINE AUTOMATIS√â (6 √©tapes - PAR D√âFAUT):
    1. D√©tection des √©v√©nements extr√™mes (CHIRPS 1981-2023)
    2. Analyse spatiale TOP 10 √©v√©nements les plus √©tendus
    3. Analyse spatiale d√©taill√©e TOP 5 √©v√©nements les plus intenses  
    4. Analyse des t√©l√©connexions (IOD, ENSO, TNA) avec ML
    5. Pipeline d'apprentissage automatique (classification + r√©gression)
    6. Analyse de clustering avanc√©e (5 algorithmes)

PIPELINE INTERACTIF (7 √©tapes):
    Ajoute l'outil de pr√©diction interactif entre les √©tapes 5 et 6

UTILISATION:
    python main.py [OPTIONS] [FICHIER_CHIRPS]

ARGUMENTS:
    FICHIER_CHIRPS    Chemin vers le fichier CHIRPS (.mat ou .nc)
                      Optionnel - d√©tection automatique par d√©faut

OPTIONS DE PIPELINE:
    --full-pipeline       Pipeline complet avec outil interactif (7 √©tapes)
    --interactive         Mode interactif avec questions utilisateur
    --only-top5           Analyse spatiale TOP 5 uniquement
    --only-teleconnections Analyse des t√©l√©connexions uniquement  
    --only-ml             Pipeline ML uniquement
    --only-clustering     Analyse de clustering uniquement
    --skip-top10          Ignorer l'analyse TOP 10
    --skip-spatial        Ignorer toutes les analyses spatiales
    
OPTIONS T√âL√âCONNEXIONS:
    --max-lag N           D√©calage temporel maximum (d√©faut: 12 mois)
    --correlation-type T  Type de corr√©lation: pearson|spearman (d√©faut: pearson)

OPTIONS MACHINE LEARNING:
    --skip-clustering     Ignorer l'analyse de clustering dans le pipeline ML
    --skip-prediction-test Ignorer le test de l'outil de pr√©diction

EXEMPLES:
    # Pipeline automatis√© par d√©faut (RECOMMAND√â pour le m√©moire)
    python main.py
    
    # Pipeline complet avec outil interactif
    python main.py --full-pipeline
    
    # Mode enti√®rement interactif
    python main.py --interactive
    
    # Machine Learning uniquement (apr√®s t√©l√©connexions)
    python main.py --only-ml
    
    # Clustering avanc√© uniquement
    python main.py --only-clustering
    
    # T√©l√©connexions + ML (ignorer spatial)
    python main.py --skip-spatial
    
    # Outil de pr√©diction interactif s√©par√©ment
    python scripts/06_prediction_tool.py

AVANTAGES DU MODE AUTOMATIS√â:
    ‚úÖ Aucune intervention utilisateur requise
    ‚úÖ Id√©al pour l'ex√©cution en lot ou sur serveur
    ‚úÖ Pipeline reproductible pour le m√©moire
    ‚úÖ Tous les mod√®les ML sont entra√Æn√©s et test√©s
    ‚úÖ Rapports et visualisations g√©n√©r√©s automatiquement

SORTIES:
    data/processed/           - Donn√©es trait√©es et datasets ML
    outputs/models/           - Mod√®les ML entra√Æn√©s (.pkl)
    outputs/reports/          - Rapports d'analyse d√©taill√©s
    outputs/visualizations/   - Toutes les cartes et graphiques
    outputs/data/            - M√©triques et r√©sum√©s structur√©s
    outputs/logs/            - Journaux d'ex√©cution

PR√âREQUIS:
    ‚Ä¢ Python 3.8+
    ‚Ä¢ Biblioth√®ques ML: scikit-learn, xgboost, pandas, numpy
    ‚Ä¢ Fichiers CHIRPS dans data/raw/
    ‚Ä¢ Indices climatiques dans data/raw/climate_indices/
    ‚Ä¢ Structure de projet respect√©e

NOUVEAUT√â:
    Le pipeline automatis√© (6 √©tapes) est maintenant ex√©cut√© PAR D√âFAUT.
    Plus d'interruption par des questions interactives !
    """
    print(help_text)

if __name__ == "__main__":
    # V√©rifier si l'aide est demand√©e
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help']:
        show_help()
        sys.exit(0)
    
    # Lancer l'analyse
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Analyse interrompue par l'utilisateur")
        print("Les fichiers partiels peuvent √™tre conserv√©s dans outputs/")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        print("V√©rifiez la configuration et les d√©pendances")
        import traceback
        traceback.print_exc()
        sys.exit(1)