# src/analysis/detection.py
"""
Module de d√©tection des √©v√©nements de pr√©cipitations extr√™mes.
"""

import numpy as np
import pandas as pd
from typing import Tuple, List, Dict, Any
from tqdm import tqdm
import sys
from pathlib import Path

# Ajouter le dossier parent au path pour les imports
try:
    from ..config.settings import DETECTION_CRITERIA
except ImportError:
    try:
        from src.config.settings import DETECTION_CRITERIA
    except ImportError:
        # Valeurs par d√©faut en dernier recours
        DETECTION_CRITERIA = {
            'threshold_anomaly': 2.0,
            'min_grid_points': 40,
            'min_precipitation': 5.0
        }

def detect_extreme_precipitation_events_final(precip_data: np.ndarray, std_anomalies: np.ndarray, 
                                            dates: List, lats: np.ndarray, lons: np.ndarray) -> pd.DataFrame:
    """
    D√©tection finale des √©v√©nements de pr√©cipitations extr√™mes.
    
    Args:
        precip_data (np.ndarray): Donn√©es de pr√©cipitation (temps, lat, lon)
        std_anomalies (np.ndarray): Anomalies standardis√©es
        dates (List): Liste des dates
        lats (np.ndarray): Latitudes
        lons (np.ndarray): Longitudes
        
    Returns:
        pd.DataFrame: DataFrame des √©v√©nements d√©tect√©s
    """
    print("\nüîÑ D√âTECTION DES √âV√âNEMENTS EXTR√äMES - VERSION FINALE")
    print("-" * 50)
    print("Crit√®res de d√©tection optimis√©s:")
    print("‚Ä¢ Anomalie standardis√©e: > +2œÉ (98e centile)")
    print("‚Ä¢ Points de grille minimum: 40 (‚âà7% superficie)")
    print("‚Ä¢ Pr√©cipitation maximale: ‚â• 5mm (r√©aliste pour le S√©n√©gal)")
    print("‚Ä¢ Classement: par couverture spatiale d√©croissante")
    
    # Param√®tres optimis√©s
    THRESHOLD_ANOMALY = DETECTION_CRITERIA['threshold_anomaly']
    MIN_GRID_POINTS = DETECTION_CRITERIA['min_grid_points']
    MIN_PRECIPITATION = DETECTION_CRITERIA['min_precipitation']
    
    n_time, n_lat, n_lon = precip_data.shape
    total_grid_points = n_lat * n_lon
    
    print(f"\nParam√®tres de d√©tection:")
    print(f"   Points de grille totaux: {total_grid_points}")
    print(f"   Seuil minimum: {MIN_GRID_POINTS} points ({MIN_GRID_POINTS/total_grid_points*100:.1f}%)")
    print(f"   Seuil d'anomalie: +{THRESHOLD_ANOMALY}œÉ")
    print(f"   Seuil de pr√©cipitation: {MIN_PRECIPITATION} mm")
    
    extreme_events = []
    
    print("\nRecherche des √©v√©nements extr√™mes...")
    
    for i in tqdm(range(n_time), desc="D√©tection"):
        # Donn√©es du jour
        day_precip = precip_data[i, :, :]
        day_anomalies = std_anomalies[i, :, :]
        
        # Masque des points d√©passant le seuil d'anomalie
        extreme_mask = (day_anomalies > THRESHOLD_ANOMALY) & ~np.isnan(day_anomalies)
        n_extreme_points = np.sum(extreme_mask)
        
        # V√©rifier le crit√®re de couverture minimale
        if n_extreme_points >= MIN_GRID_POINTS:
            # V√©rifier le crit√®re de pr√©cipitation
            max_precip_day = np.nanmax(day_precip)
            
            if not np.isnan(max_precip_day) and max_precip_day >= MIN_PRECIPITATION:
                # Pourcentage de couverture
                coverage_percent = (n_extreme_points / total_grid_points) * 100
                
                # Statistiques des pr√©cipitations dans les zones extr√™mes
                extreme_precip = day_precip[extreme_mask]
                mean_precip = np.nanmean(extreme_precip)
                min_precip = np.nanmin(extreme_precip)
                
                # Statistiques des anomalies dans les zones extr√™mes
                extreme_anomalies = day_anomalies[extreme_mask]
                mean_anomaly = np.nanmean(extreme_anomalies)
                max_anomaly = np.nanmax(extreme_anomalies)
                
                # Centro√Øde g√©ographique de l'√©v√©nement
                lat_indices, lon_indices = np.where(extreme_mask)
                centroid_lat = np.mean(lats[lat_indices])
                centroid_lon = np.mean(lons[lon_indices])
                
                # Stocker l'√©v√©nement
                extreme_events.append({
                    'date': dates[i],
                    'coverage_points': n_extreme_points,
                    'coverage_percent': coverage_percent,
                    'mean_precip': mean_precip,
                    'max_precip': max_precip_day,
                    'min_precip': min_precip,
                    'mean_anomaly': mean_anomaly,
                    'max_anomaly': max_anomaly,
                    'centroid_lat': centroid_lat,
                    'centroid_lon': centroid_lon,
                    'month': dates[i].month,
                    'year': dates[i].year,
                    'day_of_year': dates[i].timetuple().tm_yday
                })
    
    print(f"\n‚úÖ √âv√©nements d√©tect√©s: {len(extreme_events)}")
    
    if extreme_events:
        # Cr√©er DataFrame
        df_events = pd.DataFrame(extreme_events)
        df_events.set_index('date', inplace=True)
        
        # CLASSEMENT PAR COUVERTURE SPATIALE (d√©croissant)
        df_events.sort_values(['coverage_points', 'max_anomaly'], 
                            ascending=[False, False], inplace=True)
        
        print(f"   P√©riode: {df_events.index.min().strftime('%Y-%m-%d')} √† {df_events.index.max().strftime('%Y-%m-%d')}")
        print(f"   Fr√©quence moyenne: {len(df_events)/(df_events['year'].max()-df_events['year'].min()+1):.1f} √©v√©nements/an")
        
        # Validation des crit√®res
        print(f"\nüîç VALIDATION DES CRIT√àRES:")
        print(f"   ‚úÖ Tous les √©v√©nements: anomalie > +{THRESHOLD_ANOMALY}œÉ")
        print(f"   ‚úÖ Tous les √©v√©nements: couverture ‚â• {MIN_GRID_POINTS} points")
        print(f"   ‚úÖ Tous les √©v√©nements: pr√©cipitation ‚â• {MIN_PRECIPITATION} mm")
        print(f"   üìä Pr√©cipitation moyenne: {df_events['max_precip'].mean():.2f} mm")
        print(f"   üìä Pr√©cipitation m√©diane: {df_events['max_precip'].median():.2f} mm")
        print(f"   üìä Couverture moyenne: {df_events['coverage_percent'].mean():.2f}%")
        print(f"   üìä Anomalie moyenne: {df_events['max_anomaly'].mean():.2f}œÉ")
        
        return df_events
    else:
        print("‚ùå Aucun √©v√©nement d√©tect√© avec ces crit√®res")
        return pd.DataFrame()


def analyze_spatial_distribution(df_events: pd.DataFrame, lats: np.ndarray, lons: np.ndarray) -> Tuple[pd.Series, pd.Series]:
    """
    Analyse la distribution spatiale des √©v√©nements extr√™mes.
    
    Args:
        df_events (pd.DataFrame): DataFrame des √©v√©nements
        lats (np.ndarray): Latitudes
        lons (np.ndarray): Longitudes
        
    Returns:
        Tuple[pd.Series, pd.Series]: (r√©gions_lat, r√©gions_lon)
    """
    print("\nüîÑ ANALYSE DE LA DISTRIBUTION SPATIALE")
    print("-" * 50)
    
    # Statistiques spatiales
    print("üìç Statistiques des centro√Ødes:")
    print(f"   Latitude moyenne: {df_events['centroid_lat'].mean():.3f}¬∞N")
    print(f"   Longitude moyenne: {df_events['centroid_lon'].mean():.3f}¬∞E")
    print(f"   √âcart-type latitude: {df_events['centroid_lat'].std():.3f}¬∞")
    print(f"   √âcart-type longitude: {df_events['centroid_lon'].std():.3f}¬∞")
    
    # R√©gions pr√©f√©rentielles
    lat_bins = np.linspace(df_events['centroid_lat'].min(), df_events['centroid_lat'].max(), 5)
    lon_bins = np.linspace(df_events['centroid_lon'].min(), df_events['centroid_lon'].max(), 5)
    
    # 4 labels pour 5 bins
    lat_regions = pd.cut(df_events['centroid_lat'], bins=lat_bins, 
                        labels=['Sud', 'Sud-Centre', 'Nord-Centre', 'Nord'])
    lon_regions = pd.cut(df_events['centroid_lon'], bins=lon_bins, 
                        labels=['Ouest', 'Ouest-Centre', 'Est-Centre', 'Est'])
    
    print(f"\nüìä Distribution r√©gionale (Latitude):")
    for region, count in lat_regions.value_counts().items():
        pct = count / len(df_events) * 100
        print(f"   {region}: {count} √©v√©nements ({pct:.1f}%)")
    
    print(f"\nüìä Distribution r√©gionale (Longitude):")
    for region, count in lon_regions.value_counts().items():
        pct = count / len(df_events) * 100
        print(f"   {region}: {count} √©v√©nements ({pct:.1f}%)")
    
    return lat_regions, lon_regions


class ExtremeEventDetector:
    """
    Classe pour la d√©tection des √©v√©nements de pr√©cipitations extr√™mes.
    """
    
    def __init__(self, threshold_anomaly: float = None, min_grid_points: int = None, 
                 min_precipitation: float = None):
        """
        Initialise le d√©tecteur d'√©v√©nements extr√™mes.
        
        Args:
            threshold_anomaly (float, optional): Seuil d'anomalie standardis√©e
            min_grid_points (int, optional): Nombre minimum de points de grille
            min_precipitation (float, optional): Pr√©cipitation minimale
        """
        self.threshold_anomaly = threshold_anomaly or DETECTION_CRITERIA['threshold_anomaly']
        self.min_grid_points = min_grid_points or DETECTION_CRITERIA['min_grid_points']
        self.min_precipitation = min_precipitation or DETECTION_CRITERIA['min_precipitation']
    
    def detect_events(self, precip_data: np.ndarray, anomalies: np.ndarray, 
                     dates: List, lats: np.ndarray, lons: np.ndarray) -> pd.DataFrame:
        """
        D√©tecte les √©v√©nements de pr√©cipitations extr√™mes.
        
        Args:
            precip_data (np.ndarray): Donn√©es de pr√©cipitation
            anomalies (np.ndarray): Anomalies standardis√©es
            dates (List): Liste des dates
            lats (np.ndarray): Latitudes
            lons (np.ndarray): Longitudes
            
        Returns:
            pd.DataFrame: DataFrame des √©v√©nements d√©tect√©s
        """
        # Sauvegarder les crit√®res actuels
        current_criteria = DETECTION_CRITERIA.copy()
        
        # Mettre √† jour avec les valeurs de l'instance
        DETECTION_CRITERIA['threshold_anomaly'] = self.threshold_anomaly
        DETECTION_CRITERIA['min_grid_points'] = self.min_grid_points
        DETECTION_CRITERIA['min_precipitation'] = self.min_precipitation
        
        try:
            # D√©tecter les √©v√©nements
            df_events = detect_extreme_precipitation_events_final(
                precip_data, anomalies, dates, lats, lons
            )
            
            return df_events
            
        finally:
            # Restaurer les crit√®res originaux
            DETECTION_CRITERIA.update(current_criteria)


if __name__ == "__main__":
    print("Module de d√©tection des √©v√©nements extr√™mes")
    print("=" * 50)
    print("Ce module contient les outils pour:")
    print("‚Ä¢ D√©tecter les √©v√©nements de pr√©cipitations extr√™mes")
    print("‚Ä¢ Analyser la distribution spatiale")
    print("‚Ä¢ Valider les crit√®res de d√©tection")