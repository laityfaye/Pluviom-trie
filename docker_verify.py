#!/usr/bin/env python3
"""
Script de V√©rification Docker - Installation Compl√®te
V√©rifie que votre installation Docker est correcte et fonctionnelle

Usage:
    python docker_verify.py
    python docker_verify.py --detailed
    python docker_verify.py --fix-issues

Ce script v√©rifie:
1. Installation Docker Desktop
2. Structure des fichiers Docker
3. Configuration docker-compose
4. Variables d'environnement
5. Connectivit√© des services
6. Pipeline ML dans Docker
"""

import os
import sys
import subprocess
import json
import time
from pathlib import Path
from typing import Dict, List, Tuple, Optional
import argparse

class DockerVerificationManager:
    def __init__(self, project_root=None, detailed=False, fix_issues=False):
        self.project_root = Path(project_root) if project_root else Path.cwd()
        self.detailed = detailed
        self.fix_issues = fix_issues
        self.verification_results = {}
        self.issues_found = []
        self.fixes_applied = []
        
    def print_header(self, title: str, level: int = 1):
        """Affiche un en-t√™te format√©."""
        symbols = ["üê≥", "üìã", "üîç", "‚öôÔ∏è"]
        symbol = symbols[min(level-1, len(symbols)-1)]
        
        if level == 1:
            print(f"\n{symbol} {title}")
            print("=" * (len(title) + 3))
        else:
            print(f"\n{symbol} {title}")
            print("-" * (len(title) + 3))
    
    def run_command(self, cmd: List[str], capture_output=True, timeout=30) -> Tuple[bool, str, str]:
        """Ex√©cute une commande et retourne le r√©sultat."""
        try:
            result = subprocess.run(
                cmd, 
                capture_output=capture_output, 
                text=True, 
                timeout=timeout
            )
            return result.returncode == 0, result.stdout, result.stderr
        except subprocess.TimeoutExpired:
            return False, "", "Timeout expired"
        except FileNotFoundError:
            return False, "", f"Command not found: {cmd[0]}"
        except Exception as e:
            return False, "", str(e)
    
    def check_docker_installation(self) -> Dict[str, bool]:
        """V√©rifie l'installation Docker."""
        self.print_header("V√©rification Installation Docker", 2)
        
        results = {}
        
        # 1. Docker Desktop install√©
        success, version, error = self.run_command(["docker", "--version"])
        results["docker_installed"] = success
        if success:
            print(f"‚úÖ Docker install√©: {version.strip()}")
        else:
            print(f"‚ùå Docker non trouv√©: {error}")
            self.issues_found.append("Docker Desktop non install√©")
        
        # 2. Docker Compose
        success, version, error = self.run_command(["docker-compose", "--version"])
        results["docker_compose"] = success
        if success:
            print(f"‚úÖ Docker Compose: {version.strip()}")
        else:
            print(f"‚ùå Docker Compose non trouv√©: {error}")
            self.issues_found.append("Docker Compose non disponible")
        
        # 3. Docker daemon running
        success, output, error = self.run_command(["docker", "info"])
        results["docker_running"] = success
        if success:
            print("‚úÖ Docker daemon en cours d'ex√©cution")
        else:
            print(f"‚ùå Docker daemon non accessible: {error}")
            self.issues_found.append("Docker daemon non d√©marr√©")
        
        # 4. WSL2 (Windows sp√©cifique)
        if os.name == 'nt':  # Windows
            success, output, error = self.run_command(["wsl", "--list", "--verbose"])
            results["wsl2"] = success
            if success:
                print("‚úÖ WSL2 disponible")
            else:
                print(f"‚ùå WSL2 non configur√©: {error}")
                self.issues_found.append("WSL2 non configur√© (Windows)")
        
        return results
    
    def check_docker_structure(self) -> Dict[str, bool]:
        """V√©rifie la structure Docker du projet."""
        self.print_header("V√©rification Structure Docker", 2)
        
        expected_files = {
            # Fichiers Docker essentiels
            "docker-compose.yml": "Orchestration des services",
            ".env": "Variables d'environnement",
            ".dockerignore": "Exclusions Docker",
            
            # Dockerfiles
            "docker/api/Dockerfile": "Image API FastAPI",
            "docker/ml-pipeline/Dockerfile": "Image Pipeline ML",
            "docker/timescaledb/init-scripts": "Scripts d'initialisation DB",
            
            # Services
            "services/api/main.py": "Code API FastAPI",
            "services/api/requirements.txt": "D√©pendances API",
            
            # Scripts Docker
            "docker/scripts/startup.ps1": "Script de d√©marrage",
            "docker/scripts/deploy.ps1": "Script de d√©ploiement",
            
            # Monitoring
            "monitoring/prometheus.yml": "Configuration Prometheus"
        }
        
        results = {}
        missing_files = []
        
        for file_path, description in expected_files.items():
            full_path = self.project_root / file_path
            exists = full_path.exists()
            results[file_path] = exists
            
            if exists:
                print(f"‚úÖ {file_path:<35} - {description}")
            else:
                print(f"‚ùå {file_path:<35} - MANQUANT ({description})")
                missing_files.append(file_path)
        
        if missing_files:
            self.issues_found.append(f"Fichiers Docker manquants: {', '.join(missing_files)}")
        
        return results
    
    def check_docker_compose_validity(self) -> Dict[str, bool]:
        """V√©rifie la validit√© du docker-compose.yml."""
        self.print_header("V√©rification Docker Compose", 2)
        
        results = {}
        
        # 1. Syntaxe docker-compose
        success, output, error = self.run_command(["docker-compose", "config", "--quiet"])
        results["compose_syntax"] = success
        if success:
            print("‚úÖ Syntaxe docker-compose.yml valide")
        else:
            print(f"‚ùå Erreur syntaxe docker-compose.yml: {error}")
            self.issues_found.append("docker-compose.yml invalide")
        
        # 2. Services d√©finis
        compose_file = self.project_root / "docker-compose.yml"
        if compose_file.exists():
            try:
                with open(compose_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                expected_services = ["timescaledb", "redis", "api", "ml-pipeline"]
                services_found = []
                
                for service in expected_services:
                    if f"{service}:" in content:
                        services_found.append(service)
                        print(f"‚úÖ Service {service} d√©fini")
                    else:
                        print(f"‚ùå Service {service} manquant")
                
                results["all_services"] = len(services_found) == len(expected_services)
                if len(services_found) != len(expected_services):
                    missing = set(expected_services) - set(services_found)
                    self.issues_found.append(f"Services manquants: {', '.join(missing)}")
                    
            except Exception as e:
                print(f"‚ùå Erreur lecture docker-compose.yml: {e}")
                results["all_services"] = False
        
        return results
    
    def check_environment_variables(self) -> Dict[str, bool]:
        """V√©rifie les variables d'environnement."""
        self.print_header("V√©rification Variables d'Environnement", 2)
        
        results = {}
        env_file = self.project_root / ".env"
        
        if not env_file.exists():
            print("‚ùå Fichier .env manquant")
            self.issues_found.append("Fichier .env manquant")
            return {"env_file_exists": False}
        
        try:
            with open(env_file, 'r', encoding='utf-8') as f:
                env_content = f.read()
            
            required_vars = {
                "POSTGRES_DB": "Base de donn√©es PostgreSQL",
                "POSTGRES_USER": "Utilisateur PostgreSQL", 
                "POSTGRES_PASSWORD": "Mot de passe PostgreSQL",
                "API_SECRET_KEY": "Cl√© secr√®te API",
                "COMPOSE_PROJECT_NAME": "Nom du projet Docker"
            }
            
            missing_vars = []
            for var, description in required_vars.items():
                if f"{var}=" in env_content:
                    print(f"‚úÖ {var:<20} - {description}")
                else:
                    print(f"‚ùå {var:<20} - MANQUANT ({description})")
                    missing_vars.append(var)
            
            results["env_file_exists"] = True
            results["all_vars_present"] = len(missing_vars) == 0
            
            if missing_vars:
                self.issues_found.append(f"Variables .env manquantes: {', '.join(missing_vars)}")
            
            # V√©rifier les mots de passe par d√©faut
            if "secure_password" in env_content or "ChangeMe" not in env_content:
                print("‚ö†Ô∏è  Utilisez des mots de passe s√©curis√©s en production")
            
        except Exception as e:
            print(f"‚ùå Erreur lecture .env: {e}")
            results["env_file_exists"] = False
            
        return results
    
    def check_docker_services_status(self) -> Dict[str, bool]:
        """V√©rifie le statut des services Docker."""
        self.print_header("V√©rification Services Docker", 2)
        
        results = {}
        
        # 1. V√©rifier si des services sont en cours
        success, output, error = self.run_command(["docker-compose", "ps"])
        if success:
            print("üìä √âtat des services Docker:")
            print(output)
            
            # Analyser la sortie pour voir les services actifs
            lines = output.strip().split('\n')
            if len(lines) > 1:  # Au moins l'en-t√™te + une ligne
                running_services = []
                for line in lines[1:]:  # Ignorer l'en-t√™te
                    if line.strip() and "Up" in line:
                        service_name = line.split()[0]
                        running_services.append(service_name)
                
                if running_services:
                    print(f"‚úÖ Services actifs: {', '.join(running_services)}")
                    results["services_running"] = True
                else:
                    print("‚ö†Ô∏è  Aucun service Docker en cours d'ex√©cution")
                    results["services_running"] = False
            else:
                print("‚ö†Ô∏è  Aucun service Docker d√©fini ou d√©marr√©")
                results["services_running"] = False
        else:
            print(f"‚ùå Impossible de v√©rifier les services: {error}")
            results["services_running"] = False
        
        return results
    
    def check_project_structure_compatibility(self) -> Dict[str, bool]:
        """V√©rifie que la structure du projet est compatible avec Docker."""
        self.print_header("V√©rification Compatibilit√© Projet", 2)
        
        results = {}
        
        # V√©rifier les fichiers du projet original
        original_files = {
            "main.py": "Point d'entr√©e principal",
            "requirements.txt": "D√©pendances Python",
            "scripts/": "Scripts d'analyse ML",
            "src/": "Code source modulaire",
            "data/": "Donn√©es du projet"
        }
        
        compatibility_score = 0
        total_files = len(original_files)
        
        for file_path, description in original_files.items():
            full_path = self.project_root / file_path.rstrip('/')
            exists = full_path.exists()
            
            if exists:
                print(f"‚úÖ {file_path:<20} - {description}")
                compatibility_score += 1
            else:
                print(f"‚ùå {file_path:<20} - MANQUANT ({description})")
        
        results["project_compatible"] = compatibility_score >= total_files * 0.8
        results["compatibility_score"] = compatibility_score / total_files
        
        if compatibility_score < total_files:
            missing_count = total_files - compatibility_score
            self.issues_found.append(f"{missing_count} fichiers projet manquants")
        
        return results
    
    def test_docker_services(self) -> Dict[str, bool]:
        """Teste la connectivit√© des services Docker."""
        self.print_header("Test des Services Docker", 2)
        
        results = {}
        
        # 1. Tenter de d√©marrer les services
        print("üöÄ Tentative de d√©marrage des services...")
        success, output, error = self.run_command(
            ["docker-compose", "up", "-d"], 
            timeout=120
        )
        
        if success:
            print("‚úÖ Services d√©marr√©s avec succ√®s")
            results["services_start"] = True
            
            # Attendre un peu pour que les services s'initialisent
            print("‚è≥ Attente initialisation des services...")
            time.sleep(15)
            
            # 2. Tester la connectivit√© des services
            services_to_test = {
                "api": ("http://localhost:8000/health", "API FastAPI"),
                "dashboard": ("http://localhost:3000", "Dashboard Web"),
                "grafana": ("http://localhost:3001", "Grafana"),
                "prometheus": ("http://localhost:9090", "Prometheus")
            }
            
            for service_name, (url, description) in services_to_test.items():
                print(f"üîç Test {description}...")
                try:
                    # Utiliser curl pour tester (plus fiable que requests)
                    success, output, error = self.run_command(
                        ["curl", "-f", "-s", url], 
                        timeout=10
                    )
                    if success:
                        print(f"‚úÖ {description} accessible: {url}")
                        results[f"{service_name}_accessible"] = True
                    else:
                        print(f"‚ùå {description} non accessible: {url}")
                        results[f"{service_name}_accessible"] = False
                except Exception as e:
                    print(f"‚ùå {description} erreur: {e}")
                    results[f"{service_name}_accessible"] = False
            
        else:
            print(f"‚ùå √âchec d√©marrage services: {error}")
            results["services_start"] = False
            self.issues_found.append("Impossible de d√©marrer les services Docker")
        
        return results
    
    def test_ml_pipeline(self) -> Dict[str, bool]:
        """Teste le pipeline ML dans Docker."""
        self.print_header("Test Pipeline ML Docker", 2)
        
        results = {}
        
        print("ü§ñ Test du pipeline ML...")
        
        # Tester le container ML avec un test rapide
        success, output, error = self.run_command([
            "docker-compose", "run", "--rm", "ml-pipeline", 
            "python", "-c", "import sys; print('Python ML container OK'); print(f'Python version: {sys.version}')"
        ], timeout=60)
        
        if success:
            print("‚úÖ Container ML Pipeline fonctionnel")
            print(f"üìÑ Sortie: {output.strip()}")
            results["ml_container"] = True
            
            # Test des imports Python critiques
            print("üîç Test des imports ML...")
            import_test_cmd = [
                "docker-compose", "run", "--rm", "ml-pipeline",
                "python", "-c", 
                "import numpy, pandas, sklearn, matplotlib; print('‚úÖ Imports ML OK')"
            ]
            
            success_imports, output_imports, error_imports = self.run_command(
                import_test_cmd, timeout=45
            )
            
            if success_imports:
                print("‚úÖ Biblioth√®ques ML disponibles")
                results["ml_libraries"] = True
            else:
                print(f"‚ùå Probl√®me imports ML: {error_imports}")
                results["ml_libraries"] = False
                self.issues_found.append("Biblioth√®ques ML non disponibles")
        else:
            print(f"‚ùå Container ML non fonctionnel: {error}")
            results["ml_container"] = False
            self.issues_found.append("Pipeline ML Docker d√©faillant")
        
        return results
    
    def generate_verification_report(self):
        """G√©n√®re un rapport de v√©rification."""
        self.print_header("Rapport de V√©rification Docker", 1)
        
        total_checks = sum(len(results) for results in self.verification_results.values())
        passed_checks = sum(
            sum(check for check in results.values() if isinstance(check, bool) and check)
            for results in self.verification_results.values()
        )
        
        success_rate = (passed_checks / total_checks * 100) if total_checks > 0 else 0
        
        print(f"üìä R√©sultats globaux:")
        print(f"   Tests pass√©s: {passed_checks}/{total_checks}")
        print(f"   Taux de r√©ussite: {success_rate:.1f}%")
        
        if success_rate >= 90:
            print("üéâ EXCELLENT! Installation Docker parfaite")
            overall_status = "EXCELLENT"
        elif success_rate >= 75:
            print("‚úÖ BIEN! Installation Docker fonctionnelle avec quelques am√©liorations possibles")
            overall_status = "BIEN"
        elif success_rate >= 50:
            print("‚ö†Ô∏è  MOYEN! Installation Docker partielle - corrections n√©cessaires")
            overall_status = "MOYEN"
        else:
            print("‚ùå PROBL√âMATIQUE! Installation Docker n√©cessite des corrections majeures")
            overall_status = "PROBL√âMATIQUE"
        
        # Probl√®mes identifi√©s
        if self.issues_found:
            print(f"\nüîß Probl√®mes identifi√©s ({len(self.issues_found)}):")
            for i, issue in enumerate(self.issues_found, 1):
                print(f"   {i}. {issue}")
        
        # Corrections appliqu√©es
        if self.fixes_applied:
            print(f"\n‚úÖ Corrections appliqu√©es ({len(self.fixes_applied)}):")
            for i, fix in enumerate(self.fixes_applied, 1):
                print(f"   {i}. {fix}")
        
        # Recommandations
        print(f"\nüí° Recommandations:")
        if success_rate < 100:
            print("   1. Corrigez les probl√®mes identifi√©s ci-dessus")
        if success_rate >= 75:
            print("   2. Lancez votre pipeline: docker-compose run --rm ml-pipeline python main.py")
            print("   3. Acc√©dez √† l'API: http://localhost:8000")
        if success_rate < 75:
            print("   2. Relancez la v√©rification apr√®s corrections: python docker_verify.py")
        
        # Sauvegarder le rapport
        report = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "overall_status": overall_status,
            "success_rate": success_rate,
            "total_checks": total_checks,
            "passed_checks": passed_checks,
            "results": self.verification_results,
            "issues_found": self.issues_found,
            "fixes_applied": self.fixes_applied
        }
        
        report_file = self.project_root / "docker_verification_report.json"
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            print(f"\nüìÑ Rapport sauvegard√©: {report_file}")
        except Exception as e:
            print(f"\n‚ö†Ô∏è  Impossible de sauvegarder le rapport: {e}")
        
        return overall_status, success_rate
    
    def run_complete_verification(self) -> Tuple[str, float]:
        """Ex√©cute la v√©rification compl√®te."""
        self.print_header("V√âRIFICATION INSTALLATION DOCKER", 1)
        print(f"üìÅ Projet: {self.project_root}")
        print(f"üîç Mode: {'D√©taill√©' if self.detailed else 'Standard'}")
        print(f"üîß Corrections auto: {'Activ√©es' if self.fix_issues else 'D√©sactiv√©es'}")
        
        # √âtape 1: Installation Docker
        self.verification_results["docker_installation"] = self.check_docker_installation()
        
        # √âtape 2: Structure Docker
        self.verification_results["docker_structure"] = self.check_docker_structure()
        
        # √âtape 3: Docker Compose
        self.verification_results["docker_compose"] = self.check_docker_compose_validity()
        
        # √âtape 4: Variables d'environnement
        self.verification_results["environment"] = self.check_environment_variables()
        
        # √âtape 5: Compatibilit√© projet
        self.verification_results["project_compatibility"] = self.check_project_structure_compatibility()
        
        # √âtape 6: Statut services (si demand√©)
        if self.detailed:
            self.verification_results["services_status"] = self.check_docker_services_status()
        
        # √âtape 7: Test services (si demand√©)
        if self.detailed:
            self.verification_results["services_test"] = self.test_docker_services()
            
        # √âtape 8: Test pipeline ML (si demand√©)
        if self.detailed:
            self.verification_results["ml_pipeline"] = self.test_ml_pipeline()
        
        # G√©n√©rer le rapport final
        return self.generate_verification_report()

def main():
    """Point d'entr√©e principal."""
    parser = argparse.ArgumentParser(
        description="V√©rification compl√®te de l'installation Docker",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
EXEMPLES:
    # V√©rification standard
    python docker_verify.py
    
    # V√©rification d√©taill√©e avec tests de services
    python docker_verify.py --detailed
    
    # V√©rification avec corrections automatiques
    python docker_verify.py --fix-issues
    
    # Chemin de projet sp√©cifique
    python docker_verify.py --project-root /path/to/project
        """
    )
    
    parser.add_argument(
        "--project-root",
        help="Chemin racine du projet",
        default="."
    )
    parser.add_argument(
        "--detailed",
        action="store_true",
        help="V√©rification d√©taill√©e avec tests de services"
    )
    parser.add_argument(
        "--fix-issues",
        action="store_true", 
        help="Tenter de corriger automatiquement les probl√®mes"
    )
    
    args = parser.parse_args()
    
    try:
        verifier = DockerVerificationManager(
            project_root=args.project_root,
            detailed=args.detailed,
            fix_issues=args.fix_issues
        )
        
        overall_status, success_rate = verifier.run_complete_verification()
        
        # Code de sortie bas√© sur le taux de r√©ussite
        if success_rate >= 90:
            return 0  # Succ√®s
        elif success_rate >= 75:
            return 1  # Avertissement
        else:
            return 2  # Erreur
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  V√©rification interrompue par l'utilisateur")
        return 130
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())