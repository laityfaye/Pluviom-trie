version: '3.8'

services:
  # Base de données TimescaleDB
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: climate-timescaledb
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-climate_db}
      - POSTGRES_USER=${POSTGRES_USER:-climate_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./docker/timescaledb/init-scripts:/docker-entrypoint-initdb.d
      - ./data/backup:/backup
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-climate_user} -d $${POSTGRES_DB:-climate_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - climate-network

  # Redis pour cache et files d'attente
  redis:
    image: redis:7-alpine
    container_name: climate-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - climate-network

  # Pipeline ML - Traitement existant
  ml-pipeline:
    build: 
      context: .
      dockerfile: docker/ml-pipeline/Dockerfile
    container_name: climate-ml-pipeline
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-climate_user}:${POSTGRES_PASSWORD:-secure_password}@timescaledb:5432/${POSTGRES_DB:-climate_db}
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app:/app/src
    depends_on:
      timescaledb:
        condition: service_healthy
    volumes:
      - ./data:/app/data
      - ./outputs:/app/outputs
      - ml_models:/app/outputs/models
    working_dir: /app
    # NOUVELLES LIGNES - Limites de ressources
    deploy:
      resources:
        limits:
          memory: 8G      # Augmenter à 8GB
          cpus: '4.0'     # 4 CPU cores
        reservations:
          memory: 4G      # Réserver 4GB minimum
          cpus: '2.0'     # 2 CPU cores minimum
    # Configuration pour éviter les timeouts
    stop_grace_period: 120s
    networks:
      - climate-network
    restart: "no"
  # API FastAPI
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: climate-api
    environment:
      - DATABASE_URL=postgresql://$${POSTGRES_USER:-climate_user}:$${POSTGRES_PASSWORD:-secure_password}@timescaledb:5432/$${POSTGRES_DB:-climate_db}
      - REDIS_URL=redis://redis:6379
      - MODEL_PATH=/app/models
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ml_models:/app/models:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - climate-network

  # Dashboard Web (à développer)
  dashboard:
    image: nginx:alpine
    container_name: climate-dashboard
    ports:
      - "3000:80"
    volumes:
      - ./services/dashboard/dist:/usr/share/nginx/html:ro
      - ./docker/dashboard/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - climate-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: climate-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - climate-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: climate-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - climate-network

volumes:
  timescale_data:
    driver: local
  redis_data:
    driver: local
  ml_models:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  climate-network:
    driver: bridge
    name: senegal-climate-network


